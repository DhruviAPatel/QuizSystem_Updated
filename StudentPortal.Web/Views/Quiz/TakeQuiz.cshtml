@model StudentPortal.Web.Models.QuizViewModel

@{
    ViewData["Title"] = "Take Quiz";
}

<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center">@Model.Title</h2>
            <p class="text-center">@Model.Description</p>
        </div>
        <div class="card-body">
            <form method="post" asp-action="SubmitQuiz" asp-controller="Quiz" id="quizForm">
                <input type="hidden" name="QuizId" value="@Model.QuizId" />

                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    var q = Model.Questions[i];

                    <div class="question-container" id="question-@i" style="display:@(i == 0 ? "block" : "none")">
                        <h5 class="mb-3">Q@(i + 1): @q.QuestionText</h5>
                        <input type="hidden" name="UserAnswers[@i].QuestionId" value="@q.QuestionId" />

                        @if (q.QuestionType == "MCQ")
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="UserAnswers[@i].Answer" value="A" id="q@i-a" />
                                <label class="form-check-label" for="q@i-a">A. @q.OptionA</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="UserAnswers[@i].Answer" value="B" id="q@i-b" />
                                <label class="form-check-label" for="q@i-b">B. @q.OptionB</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="UserAnswers[@i].Answer" value="C" id="q@i-c" />
                                <label class="form-check-label" for="q@i-c">C. @q.OptionC</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="UserAnswers[@i].Answer" value="D" id="q@i-d" />
                                <label class="form-check-label" for="q@i-d">D. @q.OptionD</label>
                            </div>
                        }
                        else if (q.QuestionType == "Subjective")
                        {
                            <div class="form-group">
                                <label for="subjective-@i">Answer:</label>
                                <textarea class="form-control" id="subjective-@i" name="UserAnswers[@i].Answer" rows="3"></textarea>
                            </div>
                        }
                        else if (q.QuestionType == "Numerical")
                        {
                            <div class="form-group">
                                <label for="numerical-@i">Enter your answer:</label>
                                <input type="number" step="any" class="form-control" name="UserAnswers[@i].Answer" id="numerical-@i" />
                            </div>
                        }

                        <div class="form-group mt-3">
                            <label>Confidence Level:</label>
                            <select class="form-control" name="UserAnswers[@i].Confidence">
                                <option value="High">High</option>
                                <option value="Medium">Medium</option>
                                <option value="Low">Low</option>
                            </select>
                        </div>

                        <div class="mt-4">
                            <button type="button" class="btn btn-secondary prev-btn" onclick="prevQuestion(@i)" style="display:@(i == 0 ? "none" : "inline-block")"><i class="bi bi-chevron-left"></i> Previous</button>
                            <button type="button" class="btn btn-primary next-btn" onclick="nextQuestion(@i)" style="display:@(i == Model.Questions.Count - 1 ? "none" : "inline-block")">Next <i class="bi bi-chevron-right"></i></button>
                            <button type="submit" class="btn btn-danger submit-btn" style="display:@(i == Model.Questions.Count - 1 ? "inline-block" : "none")"><i class="bi bi-check-circle-fill"></i> Submit</button>
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
</div>

<script>
    let currentQuestion = 0;
    const totalQuestions = @Model.Questions.Count;
    let quizStartTime = Date.now();
    let questionTimestamps = [];
    let focusLostCount = 0;
    let tabSwitchCount = 0;
    let lastAnswerTime = Date.now();

    function showQuestion(index) {
        document.querySelectorAll('.question-container').forEach((q, i) => {
            q.style.display = (i === index) ? 'block' : 'none';
        });
    }

    function nextQuestion(index) {
        if (index < totalQuestions - 1) {
            currentQuestion++;
            showQuestion(currentQuestion);
        }
    }

    function prevQuestion(index) {
        if (index > 0) {
            currentQuestion--;
            showQuestion(currentQuestion);
        }
    }

    function recordAnswer(questionId) {
        let now = Date.now();
        let timeSpent = (now - lastAnswerTime) / 1000;
        lastAnswerTime = now;

        questionTimestamps.push({ questionId, timeTaken: timeSpent });

        if (timeSpent < 2) logEvent("Rapid answering", questionId, timeSpent);
        else if (timeSpent > 300) logEvent("Unusual time gap", questionId, timeSpent);
    }

    function logEvent(type, questionId = null, duration = null) {
        fetch('/Quiz/LogSuspiciousActivity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                quizId: @Model.QuizId,
                userId: '@User.Identity.Name',
                eventType: type,
                questionId: questionId,
                timeTaken: duration
            })
        });
    }

    document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
            tabSwitchCount++;
            logEvent("Tab switch");
        }
    });

    window.addEventListener("blur", () => {
        focusLostCount++;
        logEvent("Focus lost");
    });

    document.addEventListener("DOMContentLoaded", () => {
        const inputs = document.querySelectorAll("input[name^='UserAnswers'], textarea[name^='UserAnswers']");
        inputs.forEach(input => {
            input.addEventListener("change", () => {
                const match = input.name.match(/UserAnswers\[(\d+)\]/);
                if (match) {
                    const index = match[1];
                    const qId = document.querySelector(`input[name='UserAnswers[${index}].QuestionId']`)?.value;
                    if (qId) recordAnswer(parseInt(qId));
                }
            });
        });
    });
</script>
